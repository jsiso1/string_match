//https://leetcode.com/problems/shortest-palindrome/

#include <bits/stdc++.h>

class Solution {
public:
    void buildKMP(vector<int>& kmp, string& s) {
        const int n = (int)s.length();
        int j = 0;
        for (int i = 1; i<n; ++i) {
            if (s[j] == s[i]) {
                j++;
                kmp[i] = j;
            } else {
                if (j > 0) {
                    i--;
                    j = kmp[j-1];
                } else
                    ;
            }
        }
    }

    string shortestPalindrome(string s) {
        const int n = (int)s.length();
        string rev = s;
        reverse(rev.begin(), rev.end());
        vector<int> kmp(n);
        buildKMP(kmp, s);

        int i = 0;
        int j = 0;
        int best = -1;
        while (i + j < n) {
            if (s[j] == rev[i]) {
                j++, i++;
            } else {
                if (j == 0)
                    i++;
                else
                    j = kmp[j-1];
            }
        }

        j--; i--;
        int len = 0;
        if (i + j == n-1) {
            len++;
            len += 2*j;
        } else
            len += (2*(j+1));
        len = n-len;

        string begin = rev.substr(0, len);
        return begin + s;


    }
};
