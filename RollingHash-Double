const long long mod = 1000000007;
const long long mod2 = 998244353;
using ll = long long;
class Solution {
public:
    long long modpow(ll a, ll b) {
        ll result = 1;
        while (b) {
            if (b&1)
                result = (result * a)%mod;
            b = b>>1;
            a = (a*a)%mod;
        }
        return result;
    }
    
    long long modpow2(ll a, ll b) {
        ll result = 1;
        while (b) {
            if (b&1)
                result = (result * a)%mod2;
            b = b>>1;
            a = (a*a)%mod2;
        }
        return result;
    }

    long long countPrefixSuffixPairs(vector<string>& words) {
        long long base = 27;
        map<long long, long long> mp;
        map<long long, long long> mp2;

        const int n =(int)words.size();
        long long ans = 0;
        for (int i = 0; i<n; ++i) {
            string& word = words[i];
            int sz = (int)word.length();
            vector<ll> pref(sz, 0);
            vector<ll> pref2(sz, 0);
            for (int i = 0; i<sz; ++i) {
                if (i > 0) pref[i] = (pref[i-1]*base)%mod;
                if (i > 0) pref2[i] = (pref2[i-1]*base)%mod2;

                pref[i] = (pref[i] + ((int)word[i]-'a') + 1)%mod;
                pref2[i] = (pref2[i] + ((int)word[i]-'a') + 1)%mod2;

            }
            for (int j = 0; j<sz; ++j) {
                int len = j+1;
                ll sub = len == sz ? 0 : pref[sz-1-len];
                ll hash = ((pref.back() - (sub*modpow(base,len))%mod)+mod)%mod;
                ll hash2 = pref[j];

                ll sub_alt = len == sz ? 0 : pref2[sz-1-len];
                ll hash_alt = ((pref2.back() - (sub_alt*modpow2(base,len))%mod2)+mod2)%mod2;
                ll hash2_alt = pref2[j];

                if (hash == hash2 && hash_alt == hash2_alt) {
                   if (mp.count(hash) && mp2.count(hash_alt)) {
                      ans += min(mp[hash], mp2[hash_alt]);
                   }
                }
            }
            mp[pref.back()]++;
            mp2[pref2.back()]++;
        }
        
        return ans;
    }
};
